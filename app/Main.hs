{-# LANGUAGE OverloadedStrings #-}

module Main where

import BlogDSL
import Data.Time (getCurrentTime)
import qualified Data.Text.Lazy.IO as TL
import Data.Text (Text, pack)
import System.Directory (createDirectoryIfMissing)
import System.FilePath ((</>))
import CSS (renderCSS)
import Lucid
import System.IO (IOMode(..), openFile, hSetEncoding, utf8, hClose)
import qualified Data.Text.Lazy as TL

-- | Write file with UTF-8 encoding
writeFileUtf8 :: FilePath -> TL.Text -> IO ()
writeFileUtf8 path content = do
  handle <- openFile path WriteMode
  hSetEncoding handle utf8
  TL.hPutStr handle content
  hClose handle

-- | Sample blog posts
samplePosts :: IO [BlogPost]
samplePosts = do
  now <- getCurrentTime
  return
    [ BlogPost 1 "Welcome to My Blog" now
        [ HeaderContent "Introduction"
        , TextContent "Welcome to my blog built entirely in Haskell using EDSLs for both content and styling."
        , Image "/images/headshot.png" "That's me" (Just "Hello!")
        , HeaderContent "Why Haskell?"
        , TextContent "I chose Haskell for its elegant type system and EDSLs capabilities."
        , CodeBlock "haskell" "data BlogElement = \n    TextContent Text\n  | HeaderContent Text\n  | Image { path :: Text, alt :: Text }"
        ]
    ]

-- | Generate index page
generateIndex :: [BlogPost] -> Html ()
generateIndex posts = doctypehtml_ $ do
  head_ $ do
    meta_ [charset_ "utf-8"]
    meta_ [name_ "viewport", content_ "width=device-width, initial-scale=1"]
    title_ "My Blog"
    link_ [rel_ "stylesheet", type_ "text/css", href_ "css/style.css"]
    script_ [src_ "js/prism.js"] ("" :: Text)
  body_ $ do
    div_ [class_ "container"] $ do
      nav_ [class_ "nav"] $ do
        a_ [href_ "/"] "Home"
        a_ [href_ "about.html"] "About"
      main_ [] $ do
        h1_ "My Blog"
        div_ [class_ "post-list"] $ do
          mapM_ (\post -> do
            article_ [class_ "post-preview"] $ do
              h2_ $ a_ [href_ $ "posts/" <> pack (show $ postId post) <> ".html"] $ toHtml $ title post
              p_ [class_ "post-date"] $ toHtml $ show $ date post
            ) posts
      footer_ [class_ "footer"] $ do
        p_ [] $ toHtml ("Â© 2024 Generated by Haskell" :: Text)

-- | Generate static files
generateSite :: IO ()
generateSite = do
  -- Create necessary directories
  createDirectoryIfMissing True "dist"
  createDirectoryIfMissing True "dist/posts"
  createDirectoryIfMissing True "dist/css"
  createDirectoryIfMissing True "dist/js"
  createDirectoryIfMissing True "dist/images"

  -- Generate posts
  posts <- samplePosts
  mapM_ (\post -> do
    let postPath = "dist/posts/" <> show (postId post) <> ".html"
    writeFileUtf8 postPath $ renderText $ renderBlogPost post
    ) posts

  -- Generate index page
  writeFileUtf8 "dist/index.html" $ renderText $ generateIndex posts

  -- Generate CSS
  writeFileUtf8 "dist/css/style.css" renderCSS

  putStrLn "Site generated successfully in dist/ directory!"

main :: IO ()
main = generateSite
